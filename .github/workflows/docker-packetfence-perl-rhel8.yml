name: packetfence_perl_rhel8_package
on:
  push:
    branches-ignore: 
      - 'devel'   # excludes devel
    paths:
      - 'addons/packetfence-perl/**'
      - '.github/workflows/docker-packetfence-perl-rhel8.yml'
      - 'containers/packetfence-perl/rhel8/**'
  schedule:
    - cron: 0 3 * * *
  pull_request:
    branches: [ "devel" ]
    paths:
      - 'addons/packetfence-perl/**'

env:
  WORKDIR: "/root"
  VOLUME_MOUNT: "/mnt"
  OUTPUT_DIRECTORY: "/mnt/output"
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }} 

jobs:
  build_image_and_package:
    runs-on: packetfence-perl-deb-package-build
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    outputs:
      package_version: ${{ steps.contents.outputs.data }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3    

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: Find package version from changelog
        id: contents
        run: |
          package_version=$(set -e && docker run --rm -i -v ${{ github.workspace }}/addons/packetfence-perl:${{ env.WORKDIR }}/ rockylinux:8 /bin/bash -c \
          "set -e && cd ${{ env.WORKDIR }}/ && yum -y  install rpm-build > /dev/null 2>&1 && rpmspec -q --qf "%{version}"  rhel8/SPECS/packetfence-perl.spec")
          echo "Found version: $package_version"
          echo "PACKAGE_VERSION=$package_version" >> "$GITHUB_ENV"
          echo "data=$package_version" >> "$GITHUB_OUTPUT"
      
      - name: Build rhel8 package
        uses: addnab/docker-run-action@v3
        with:
            image: python:3.9
            options: --init --rm -v ${{ github.workspace }}/addons/packetfence-perl/:${{ env.WORKDIR }}
            shell: /bin/bash
            run: |
                cd ${{ env.WORKDIR }}
                ls -ltr
                set -e && pip install -q requests pynacl
                echo "1"
                redhat_username=$(cd /root/ && python3  psono.py  --api_key_id="${{ secrets.PSONO_API_KEY_ID}}" --api_key_secret_key="${{ secrets.PSONO_API_KEY_SECRET_KEY }}" --secret_id='e9d98894-bd22-4f32-8b59-653aceb72ec4' --return_value=username)
                echo "2"
                redhat_password=$(cd /root/ &&  python3  psono.py  --api_key_id="${{ secrets.PSONO_API_KEY_ID}}" --api_key_secret_key="${{ secrets.PSONO_API_KEY_SECRET_KEY }}" --secret_id='e9d98894-bd22-4f32-8b59-653aceb72ec4' --return_value=password)


      - name: Build packetfence-perl docker image
        uses: docker/build-push-action@v5
        with:
          context: './'
          push: false
          load: true
          build-args: |
            workdir=${{ env.WORKDIR }}
            output_directory=${{ env.OUTPUT_DIRECTORY }}
            REDHAT_USERNAME=${{ env.REDHAT_USERNAME }}
            REDHAT_PASSWORD=${{ env.REDHAT_PASSWORD }}
          tags: |
            inverse-inc/packetfence/packetfence-perl-rhel8:${{ env.PACKAGE_VERSION }}
            ghcr.io/inverse-inc/packetfence/packetfence-perl-rhel8:${{ env.PACKAGE_VERSION }}
            ${{ env.BRANCH_NAME == 'devel' && 'inverse-inc/packetfence/packetfence-perl-rhel8:latest' || ''}}
            ${{ env.BRANCH_NAME == 'devel' && 'ghcr.io/inverse-inc/packetfence/packetfence-rhel8:latest' || ''}}
          file: containers/packetfence-perl/rhel8/Dockerfile_rhel
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build rhel8 package
        uses: addnab/docker-run-action@v3
        with:
            image: inverse-inc/packetfence/packetfence-perl-rhel8:${{ env.PACKAGE_VERSION }}
            options: --init --rm -v ${{ github.workspace }}/addons/packetfence-perl/:${{ env.WORKDIR }} -v ${{ env.VOLUME_MOUNT }}:${{ env.OUTPUT_DIRECTORY }}
            shell: /bin/bash
            run: |
                set -e && python3 install_cpan.py -d dependencies.csv -vi true && 
                ./build_package.sh

      - name: Check if the package is created
        run: |
          ls -la ${{ env.VOLUME_MOUNT }}/rhel8/packages/

  unit-test:
    needs: ['build_image_and_package']
    runs-on: packetfence-perl-deb-package-build
    container:
      image: redhat/ubi8
      volumes:
        - /mnt/rhel8/packages/:/mnt
    steps:     
      - name: Install the package packetfence-perl
        run: |
          yum -y install findutils 
          cat /etc/*release
          env
          ls -la  ${{ env.VOLUME_MOUNT }} 
          find ${{ env.VOLUME_MOUNT }} -name "packetfence-perl-*.rpm" -exec rpm -ivh {} \;


  sign_package:
    needs: ['build_image_and_package', 'unit-test']
    runs-on: packetfence-perl-deb-package-build
    container:
      image: rockylinux:8.8
      volumes:
        - /mnt/rhel8/packages/:/mnt
    steps:
      - name: Install dependenecies
        run: yum install -y rpm-sign

      - name: import private key
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --pinentry-mode loopback --import

      - name: Check if the key was imported
        run: |
          rpm -q gpg-pubkey --qf '%{name}-%{version}-%{release} --> %{summary}\n'
          gpg --list-keys

      - name: Sign the package
        run: rpm --define "_gpg_name support@inverse.ca" --define '_signature gpg' --addsign --addsign  ${{ env.VOLUME_MOUNT }}/packetfence-perl*.rpm

      - name: Verifiy the signarure of package
        run: |
          gpg  --batch --yes   --output /tmp/pubkey.pub --armor --export  support@inverse.ca && rpm --import /tmp/pubkey.pub
          rpm -qpi ${{ env.VOLUME_MOUNT }}/packetfence-perl*.rpm
          rpm --checksig ${{ env.VOLUME_MOUNT }}/packetfence-perl*.rpm

  push_docker-image_and_deb-package: 
    needs: ['build_image_and_package', 'unit-test', 'sign_package']
    runs-on: packetfence-perl-deb-package-build

    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: network=host