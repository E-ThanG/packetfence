#!/bin/bash

LOCAL_REGISTRY=local
source /usr/local/pf/conf/build_id

if [ -f /usr/local/pf/containers/.local_env ]; then
  source /usr/local/pf/containers/.local_env
fi

function base_args {
  name="$1"
  args="--sig-proxy=true --rm --name=$name --add-host=containers-gateway.internal:host-gateway -h `hostname` "

  args="$args -v /var/lib/mysql:/var/lib/mysql"
  args="$args -v /usr/local/fingerbank/db:/usr/local/fingerbank/db"

  if [ -f /usr/local/pf/var/conf/$name.env ]; then
    args="$args --env-file /usr/local/pf/var/conf/$name.env"
  fi

  args="$args -v /etc/localtime:/etc/localtime:ro"

  echo "$args"
}

function build_img {
  img="$1"
  PF_VERSION=$(sed 's/PacketFence \([0-9]*\.[0-9]*\)\.[0-9]*/\1/g' /usr/local/pf/conf/pf-release)
  docker build --build-arg=PF_VERSION=$PF_VERSION --build-arg=KNK_REGISTRY_URL=$LOCAL_REGISTRY --build-arg=IMAGE_TAG=$TAG_OR_BRANCH_NAME -q -f containers/$img/Dockerfile .
}

function build_base_images {
  local name=""
  for name in pfdebian; do
    echo "Building $name"
    docker tag $(build_img $name) $LOCAL_REGISTRY/$name:$TAG_OR_BRANCH_NAME
  done
}

function build_run {
  name="$1"
  args="$2"
  cmd="$3"
  cd /usr/local/pf/

  img=$(build_img $name)
  run_img $img $name "$args" "$cmd"
}

function run {
  name="$1"
  args="$2"
  cmd="$3"
  img=$LOCAL_REGISTRY/$name:$TAG_OR_BRANCH_NAME
  if [ "$LOCAL_DEV" = "true" ]; then
    build_run $name "$args" "$cmd"
  else
    run_img $img $name "$args" "$cmd"
  fi
}

function sdproxy() {
  SD_NOTIFY_PROXY=/usr/local/pf/sbin/sdnotify-proxy
  SD_SOCK=/usr/local/pf/var/run/$1-systemd-notify.sock
  WATCHDOG_USEC_D=10000000
  $SD_NOTIFY_PROXY $SD_SOCK /usr/bin/docker run --volume=$SD_SOCK:$SD_SOCK --env NOTIFY_SOCKET=$SD_SOCK --env WATCHDOG_USEC=$WATCHDOG_USEC_D ${@:2}
}

function run_img {
  img="$1"
  name="$2"
  args="$3"
  cmd="$4"
  cd /usr/local/pf/
  docker container rm -f $name 1&2> /dev/null
  echo "Running with args $args"
  if ! [ -z $NOTIFY_SOCKET ]; then
    sdproxy $name $args --name=$name $img $cmd
  else
   /usr/bin/docker run $args --name=$name $img $cmd
  fi
}
