---
- hosts: pfservers
  name: configure PF environment for unit tests
  become: True

  tasks:
  - name: Creating generic radius config
    copy:
      dest: "/usr/local/pf/raddb/radiusd.conf"
      content: |
        prefix = /usr
        exec_prefix = /usr
        sysconfdir = /etc
        localstatedir = /usr/local/pf/var
        sbindir = /usr/sbin
        logdir = /usr/local/pf/logs
        raddbdir = /usr/local/pf/var/radiusd
        radacctdir = /usr/local/pf/logs/radacct
        name = radiusd
        confdir = ${raddbdir}
        modconfdir = ${confdir}/mods-config
        certdir = ${confdir}/certs
        cadir   = ${confdir}/certs
        run_dir = ${localstatedir}/run
        db_dir = ${raddbdir}
        rpc_user   = ''
        rpc_pass   = "''"
        rpc_port   = 7070
        rpc_host   = 127.0.0.1
        rpc_proto  = http
        libdir = /usr/lib64/freeradius:/usr/lib/freeradius
        correct_escapes = true
        max_request_time = 10
        cleanup_delay = 5
        max_requests = 20000
        hostname_lookups = no
        checkrad = ${sbindir}/checkrad
        security {
          user = pf
          group = pf
          allow_core_dumps = no
          max_attributes = 200
          reject_delay = 1
          status_server = yes
          allow_vulnerable_openssl = yes
        }
        proxy_requests  = yes
        $INCLUDE proxy.conf
        $INCLUDE clients.conf
        thread pool {
          start_servers = 0
          max_servers = 64
          min_spare_servers = 3
          max_spare_servers = 10
          max_requests_per_server = 0
          auto_limit_acct = no
        }
        modules {
          $INCLUDE mods-enabled/
        }
        instantiate {
            redis
            rest
            raw
        }
        policy {
          $INCLUDE policy.d/
        }
        $INCLUDE sites-enabled/

  - name: Creating radius config
    copy:
      dest: "/usr/local/pf/raddb/test.conf"
      content: |
        # Copyright (C) Inverse inc.
        pidfile = /usr/local/pf/var/run/radiusd.pid
        $INCLUDE radiusd.conf
        listen {
            ipaddr = 127.0.0.1
            port = 1820
            type = auth
            virtual_server = default
        }
        listen {
            type = control
            socket = /usr/local/pf/var/run/radiusd-default.sock
            mode = rw
        }
        log {
            destination = syslog
            colourise = yes
            file = ${logdir}/radius-default.log
            syslog_facility = local1
            stripped_names = no
            auth = yes
            auth_badpass = no
            auth_goodpass = no
            msg_denied = "You are already logged in - access denied"
        }

  - name: Creating a file for password simple auth
    copy:
      dest: "{{ cli_login_radius_pod }}"
      content: |
        User-Name = "bob"
        User-Password = "hello"
        NAS-IP-Address = "192.168.0.1"

  - name: Creating a file for password via proxy
    copy:
      dest: "{{ cli_login_radius_pod_proxy }}"
      content: |
        User-Name = '{{ cli_login_radius_realm_id }}\bob'
        User-Password = "hello"
        NAS-IP-Address = "192.168.0.1" 

  - name: Authorization in raddb
    blockinfile:
      path: /usr/local/pf/raddb/mods-config/files/authorize
      block: |
        bob     Cleartext-Password := "hello"
                Reply-Message := "Hello, %{User-Name}"

  - name: Creating radius server enabled config
    copy:
      dest: "/usr/local/pf/raddb/sites-enabled/default"
      content: |
        server default {
        authorize {
                filter_username
                preprocess
                chap
                mschap
                digest
                suffix
                eap {
                        ok = return
                }
                files
                -ldap
                expiration
                logintime
                pap
        }
        authenticate {
                Auth-Type PAP {
                        pap
                }
                Auth-Type CHAP {
                        chap
                }
                Auth-Type MS-CHAP {
                        mschap
                }
                digest
                eap
        }
        preacct {
                preprocess
                acct_unique
                suffix
                files
        }
        accounting {
                detail
                unix
                exec
                attr_filter.accounting_response
        }
        session {
        }
        post-auth {
                update {
                        &reply: += &session-state:
                }
                -sql
                exec
                remove_reply_message_if_eap
                Post-Auth-Type REJECT {
                        attr_filter.access_reject
                        eap
                        remove_reply_message_if_eap
                }
        }
        pre-proxy {
        }
        post-proxy {
                eap
        }
        }

  - name: Creating radius service for Debian
    copy:
      dest: "/lib/systemd/system/radius-test.service"
      content: |
        # Copyright (C) Inverse inc.
        [Unit]
        Description=RADIUS test service
        Documentation=man:radiusd(8) man:radiusd.conf(5) http://wiki.freeradius.org/ http://networkradius.com/doc/
         
        [Service]
        Type=notify
        WatchdogSec=20
        StartLimitBurst=3
        StartLimitInterval=10
        ExecStart=/usr/sbin/freeradius -d /usr/local/pf/raddb  -n test -fm
        Restart=on-failure
    when: ansible_facts['os_family'] == "Debian"

  - name: Creating radius service for RHEL8
    copy:
      dest: "/lib/systemd/system/radius-test.service"
      content: |
        # Copyright (C) Inverse inc.
        [Unit]
        Description=RADIUS test service
        Documentation=man:radiusd(8) man:radiusd.conf(5) http://wiki.freeradius.org/ http://networkradius.com/doc/
        
        [Service]
        Type=notify
        WatchdogSec=20
        StartLimitBurst=3
        StartLimitInterval=10
        ExecStart=/usr/sbin/radiusd -d /usr/local/pf/raddb  -n test -fm
        Restart=on-failure
    when: ansible_facts['os_family'] == "RedHat"

  - name: Reload services
    ansible.builtin.systemd:
      daemon_reload: yes
